{
    "main script entry point" :{
        "prefix": "main",
        "body": [
            "if __name__ == \"__main__\":",
            "\t$0"
        ],
        "description": "Create a main script entry point"
    },
    "Dict comprehension":{
        "prefix": "compd",
        "body": [
            "{${1:key_expr}: ${2:val_expr} for ${3:var} in ${4:iterable}}"
        ],
        "description": "Dict comprehension"
    },
    "Dict comprehension with `if`" : {
        "prefix": "compdi",
        "body": [
            "{${1:key_expr}: ${2:val_expr} for ${3:var} in ${4:iterable} if ${5:var_expr_if}}"
        ],
        "description": "Dict comprehension with `if`"
    },
    "Generator comprehension" : {
        "prefix": "compg",
        "body": [
            "(${1:var_expr} for ${2:var} in ${3:iterable})"
        ],
        "description":"Generator comprehension"
    },
    "Generator comprehension with `if`": {
        "prefix": "compgi",
        "body": [
            "(${1:var_expr} for ${2:var} in ${3:iterable} if ${4:var_expr_if})"
        ],
        "description": "Generator comprehension with `if`"
    },
    "List comprehension": {
        "prefix": "compl",
        "body": [
            "[${1:var_expr} for ${2:var} in ${3:iterable}]"
        ],
        "description": "List comprehension"
    },
    "List comprehension with `if`":{
        "prefix": "compli",
        "body": [
            "[${1:var_expr} for ${2:var} in ${3:iterable} if ${4:var_expr_if}]"
        ],
        "description": "List comprehension with `if`"
    },
    "Set comprehension":{
        "prefix": "comps",
        "body": [
            "{${1:var_expr} for ${2:var} in ${3:iterable}}"
        ],
        "description": "Set comprehension"
    },
    "Set comprehension with `if`": {
        "prefix": "compsi",
        "body": [
            "{${1:var_expr} for ${2:var} in ${3:iterable} if ${4:var_expr_if}}"
        ],
        "description": "Set comprehension with `if`"
    },
    "Iterate (for ... in ...)":{
        "prefix": "iter",
        "body": [
            "for ${1:var} in ${2:iterables}:",
            "\tpass$0"
        ],
        "description": "Iterate (for ... in ...)"
    },
    "Iterate (for ... in enumerate)": {
        "prefix": "itere",
        "body": [
            "for ${1:index}, ${2:var} in enumerate(${3:iterables}):",
            "\tpass$0"
        ],
        "description": "Iterate (for ... in enumerate)"
    },
    "Property getter": {
        "prefix": "prop",
        "body": [
            "@property",
            "def ${1:arg_name}(self):",
            "\treturn self._${1:arg_name}",
            "$0",
        ],
        "description": "Property getter"
    },
    "Property getter/setter" : {
        "prefix":"props",
        "body": [
            "@property",
            "def ${1:arg_name}(self):",
            "\treturn self._${2}",
            "",
            "@${1}.setter",
            "def ${1}(self, ${3:value}):",
            "\tself._${2} = ${3}",
            "$0"
        ],
        "description": "Property getter/setter"
    },
    "Property getter/setter/deleter":{
        "prefix": "propsd",
        "body": [
            "@property",
            "def ${1:arg_name}(self):",
            "\treturn self._${2}",
            "",
            "@${1}.setter",
            "def ${1}(self, ${3:value}):",
            "\tself._${2} = ${3:value}",
            "",
            "@${1}.deleter",
            "def ${1}(self):",
            "\tdel self._${2}",
            "$0"
        ],
        "description": "Property getter/setter/deleter"
    },
    "python functions":{
        "prefix": "deff",
        "body": [
            "def ${1:func_name}(${2: func_args}):",
            "\tpass$0"
        ],
        "description": "python functions"
    },
    "python async functions":{
        "prefix": "adef",
        "body": [
            "async def ${1:func_name}(${2: func_args}):",
            "\tpass$0"
        ],
        "description": "python async functions"
    },
    "python class":{
        "prefix": "klass",
        "body": [
            "class ${1:class_name}:",
            "",
            "\tpass$0"
        ],
        "description": "python class without inheritance"
    },
    "python class inheritance":{
        "prefix": "klassi",
        "body": [
            "class ${1:class_name}(${2:super_class}):",
            "",
            "\tpass$0"
        ],
        "description": "python class with inheritance"
    },
    "python for range":{
        "prefix": "forr",
        "body": [
            "for ${1:var} in range(${2:end}):",
            "\tpass$0"
        ],
        "description": "python for x in range(y)"
    },
    "python async for":{
        "prefix": "afor",
        "body": [
            "async for ${1:var} in ${2:aiterables}:",
            "\tpass$0"
        ],
        "description": "python async for in aiterables"
    },
    "python open file by with":{
        "prefix": "openw",
        "body": [
            "with open(${1:fpath}, mode=\"${2:r}\", encoding=\"${3:utf-8}\") as ${4:handler}:",
            "\tpass$0"
        ],
        "description": "python open file by with statement"
    },
    "try except":{
        "prefix": "trye",
        "body": [
            "try:",
            "\t${1:pass}",
            "except ${2:Exception}:",
            "\t${3:pass}"
        ],
        "description": "python try except statement"
    },
    "try except finally":{
        "prefix": "tryf",
        "body": [
            "try:",
            "\t${1:pass}",
            "except ${2:Exception}:",
            "\t${3:pass}",
            "finally:",
            "\t${4:pass}"
        ],
        "description": "python try except finally statement"
    },
    "try except else":{
        "prefix": "tryl",
        "body": [
            "try:",
            "\t${1:pass}",
            "except ${2:Exception}:",
            "\t${3:pass}",
            "else:",
            "\t${4:pass}"
        ],
        "description": "python try except else statement"
    },
    "while loop":{
        "prefix": "whl",
        "body": [
            "while ${1:}:",
            "\tpass$0"
        ],
        "description": "python while loop statement"
    },
    "with statement": {
        "prefix": "wth",
        "body": [
            "with ${1:}:",
            "\tpass$0"
        ],
        "description": "python with statement"
    },
    "with...as statement": {
        "prefix": "witha",
        "body": [
            "with ${1:} as ${2:}:",
            "\tpass$0"
        ],
        "description": "python with...as statement"
    },
    "async with statement": {
        "prefix": "awith",
        "body": [
            "async with ${1:}",
            "\tpass$0"
        ],
        "description": "python async with statement"
    },
}